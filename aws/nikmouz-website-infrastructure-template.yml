# Based off this template:
# https://github.com/awslabs/aws-cloudformation-templates/blob/master/aws/services/S3/S3_Website_With_CloudFront_Distribution.yaml
# and this lambda: https://github.com/blueimp/aws-lambda
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Infrastructure template for a static website'
Parameters:
  HostedZone:
    Type: String
    Description: The DNS name of an existing Amazon Route 53 hosted zone
    AllowedPattern: (?!-)[a-zA-Z0-9-.]{1,63}(?<!-)
    ConstraintDescription: must be a valid DNS zone name.
  Certificate:
    Type: String
    Description: The Acm Certificate Arn value
    AllowedPattern: "^arn:aws:acm:[a-z0-9-]+:[0-9]+:certificate/[0-9a-f-]+$"
  LambdaEdgeArn:
    Type: String
    Description: The arn for lambda edge function

Resources:
  WebsiteS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref 'HostedZone'
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: 404.html

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteS3Bucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: s3:GetObject
            Resource: !Sub '${WebsiteS3Bucket.Arn}/*'
            Principal: '*'

  WebsiteLogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ['', [!Ref 'HostedZone', '-logs']]
      AccessControl: BucketOwnerFullControl
      LifecycleConfiguration:
        Rules:
          - Id: LogsCleanUp
            Prefix: !Ref 'HostedZone'
            Status: Enabled
            ExpirationInDays: 90

  WebsiteCDN:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref 'HostedZone'
        Enabled: 'true'
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: 'true'
          TargetOriginId: only-origin
          ViewerProtocolPolicy: redirect-to-https
          LambdaFunctionAssociations:
            - EventType: viewer-response
              LambdaFunctionARN: !Ref 'LambdaEdgeArn'
        DefaultRootObject: index.html
        Logging:
          Bucket: !GetAtt 'WebsiteLogsBucket.DomainName'
          IncludeCookies: 'true'
          Prefix: !Ref 'HostedZone'
        Origins:
          - CustomOriginConfig:
              HTTPPort: '80'
              HTTPSPort: '443'
              OriginProtocolPolicy: http-only
            DomainName: !Join ['', [!Ref 'WebsiteS3Bucket', '.s3-website-eu-west-1.amazonaws.com']]
            Id: only-origin
        PriceClass: PriceClass_100
        HttpVersion: http2
        ViewerCertificate:
          AcmCertificateArn: !Ref 'Certificate'
          MinimumProtocolVersion: TLSv1.1_2016
          SslSupportMethod: sni-only

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: WebsiteRedirectLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - logs:*
                Resource: arn:aws:logs:*:*:*
                Effect: Allow

  WebsiteRedirectLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: redirect-www-to-naked
      Description: Redirects www subdomain to naked
      Runtime: nodejs12.x
      Role: !GetAtt 'LambdaRole.Arn'
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            console.log("Event:", JSON.stringify(event));

            // Removes www subdomain from host
            const host = event.headers.Host.replace(new RegExp("^www\."), "");

            const location = `https://${host}${event.path}`;
            console.log("Redirecting to: " + location);

            const response = {
              statusCode: 301,
              headers: { location, "content-type": "text/html" }
            };

            return response;
          };

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref 'WebsiteRedirectLambda'
      Principal: apigateway.amazonaws.com

  RedirectApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: redirect-www-to-naked-API
      BinaryMediaTypes:
        - '*/*'
      EndpointConfiguration:
        Types:
          - REGIONAL

  RootRedirectMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId: !GetAtt 'RedirectApiGateway.RootResourceId'
      RestApiId: !Ref 'RedirectApiGateway'
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebsiteRedirectLambda.Arn}/invocations"

  PathRedirectResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref 'RedirectApiGateway'
      ParentId: !GetAtt 'RedirectApiGateway.RootResourceId'
      PathPart: '{proxy+}'

  PathRedirectMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId: !Ref 'PathRedirectResource'
      RestApiId: !Ref 'RedirectApiGateway'
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebsiteRedirectLambda.Arn}/invocations"

  DomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Join ['', ['www', ., !Ref 'HostedZone']]
      EndpointConfiguration:
        Types:
          - REGIONAL
      RegionalCertificateArn: 'arn:aws:acm:eu-west-1:005405328181:certificate/c346f805-c3aa-462b-a483-909112c10d64'

  BasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn: Deployment
    Properties:
      DomainName: !Ref 'DomainName'
      RestApiId: !Ref 'RedirectApiGateway'
      Stage: production

  Deployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref 'RedirectApiGateway'
      StageName: production
    DependsOn:
      - RootRedirectMethod
      - PathRedirectMethod

  WebsiteRecordSets:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Join ['', [!Ref 'HostedZone', .]]
      RecordSets:
        - Name: !Ref 'HostedZone'
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt 'WebsiteCDN.DomainName'
        - Name: !Join ['', ['www', ., !Ref 'HostedZone']]
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt 'DomainName.RegionalHostedZoneId'
            DNSName: !GetAtt 'DomainName.RegionalDomainName'

Outputs:
  WebsiteURL:
    Value: !Join ['', ['https://', !Ref 'HostedZone']]
    Description: Website URL
  S3EndpointURL:
    Value: !Join ['', [!Ref 'WebsiteS3Bucket', '.s3-website.eu-west-1.amazonaws.com']]
    Description: S3 Endpoint
  CloudFrontEndpointURL:
    Value: !GetAtt 'WebsiteCDN.DomainName'
    Description: CloudFront Endpoint